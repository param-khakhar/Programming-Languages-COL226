type token =
  | V of (string)
  | C of (string)
  | LPAR
  | RPAR
  | COMMA
  | SC
  | NL
  | ASSIGN
  | DOT
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "yaccer.mly"
    open Printf
    open List
    open String
    open A6

let parse_error s = 
        print_endline s;
        flush stdout
# 25 "yaccer.ml"
let yytransl_const = [|
  259 (* LPAR *);
  260 (* RPAR *);
  261 (* COMMA *);
  262 (* SC *);
  263 (* NL *);
  264 (* ASSIGN *);
  265 (* DOT *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* V *);
  258 (* C *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\004\000\003\000\005\000\005\000\
\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\004\000\002\000\001\000\001\000\
\004\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\008\000\000\000\002\000\012\000\000\000\003\000\
\004\000\000\000\000\000\001\000\000\000\006\000\010\000\000\000\
\000\000\009\000\000\000\005\000\011\000"

let yydgoto = "\002\000\
\006\000\007\000\008\000\009\000\015\000\016\000"

let yysindex = "\004\000\
\001\000\000\000\000\000\012\255\000\000\000\000\013\255\000\000\
\000\000\001\255\010\255\000\000\010\255\000\000\000\000\009\255\
\255\254\000\000\010\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\254\254\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\255\255\003\000"

let yytablesize = 259
let yytable = "\010\000\
\005\000\007\000\007\000\019\000\001\000\007\000\007\000\020\000\
\013\000\014\000\003\000\004\000\018\000\019\000\011\000\017\000\
\000\000\021\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000"

let yycheck = "\001\000\
\000\000\004\001\005\001\005\001\001\000\008\001\009\001\009\001\
\008\001\009\001\001\001\002\001\004\001\005\001\003\001\013\000\
\255\255\019\000\255\255\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001"

let yynames_const = "\
  LPAR\000\
  RPAR\000\
  COMMA\000\
  SC\000\
  NL\000\
  ASSIGN\000\
  DOT\000\
  EOF\000\
  "

let yynames_block = "\
  V\000\
  C\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clause) in
    Obj.repr(
# 21 "yaccer.mly"
                          ((*printf "line\n";*)_1)
# 165 "yaccer.ml"
               : A6.term * A6.term list))
; (fun __caml_parser_env ->
    Obj.repr(
# 22 "yaccer.mly"
                     ((*printf "line3\n";*) (Node ("end",[]),[]))
# 171 "yaccer.ml"
               : A6.term * A6.term list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 26 "yaccer.mly"
             ((*printf "clause-1\n";*)_1)
# 178 "yaccer.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rule) in
    Obj.repr(
# 27 "yaccer.mly"
             ((*printf "rule-1\n";*)_1)
# 185 "yaccer.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lst) in
    Obj.repr(
# 30 "yaccer.mly"
                           ((*printf "rule\n";*) (_1,_3))
# 193 "yaccer.ml"
               : 'rule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 33 "yaccer.mly"
                       ((*printf "fact\n";*)(_1,[]))
# 200 "yaccer.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 36 "yaccer.mly"
                             ((*printf "term-1\n";*) Node (_1,[]))
# 207 "yaccer.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "yaccer.mly"
                     ((*printf "term-2\n";*) V _1)
# 214 "yaccer.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'lst) in
    Obj.repr(
# 38 "yaccer.mly"
                           ((*printf"term-3\n";*)Node (_1,_3))
# 222 "yaccer.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 41 "yaccer.mly"
                  ((*printf "lst-1\n" ;*) [_1])
# 229 "yaccer.ml"
               : 'lst))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lst) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 42 "yaccer.mly"
                           ((*printf "lst-2\n";*) append _1 [_3])
# 237 "yaccer.ml"
               : 'lst))
(* Entry line *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let line (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : A6.term * A6.term list)
;;
